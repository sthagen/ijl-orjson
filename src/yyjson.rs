/* automatically generated by rust-bindgen 0.59.2 */

pub type size_t = ::std::os::raw::c_ulong;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yyjson_alc {
    pub malloc: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ::std::os::raw::c_void,
            size: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
            size: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, ptr: *mut ::std::os::raw::c_void),
    >,
    pub ctx: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_yyjson_alc() {
    assert_eq!(
        ::std::mem::size_of::<yyjson_alc>(),
        32usize,
        concat!("Size of: ", stringify!(yyjson_alc))
    );
    assert_eq!(
        ::std::mem::align_of::<yyjson_alc>(),
        8usize,
        concat!("Alignment of ", stringify!(yyjson_alc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_alc>())).malloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_alc),
            "::",
            stringify!(malloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_alc>())).realloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_alc),
            "::",
            stringify!(realloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_alc>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_alc),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_alc>())).ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_alc),
            "::",
            stringify!(ctx)
        )
    );
}
extern "C" {
    pub fn yyjson_alc_pool_init(
        alc: *mut yyjson_alc,
        buf: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> bool;
}
pub type yyjson_read_flag = u32;
pub const YYJSON_READ_NOFLAG: yyjson_read_flag = 0;
pub type yyjson_read_code = u32;
pub const YYJSON_READ_SUCCESS: yyjson_read_code = 0;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yyjson_read_err {
    pub code: yyjson_read_code,
    pub msg: *const ::std::os::raw::c_char,
    pub pos: size_t,
}
#[test]
fn bindgen_test_layout_yyjson_read_err() {
    assert_eq!(
        ::std::mem::size_of::<yyjson_read_err>(),
        24usize,
        concat!("Size of: ", stringify!(yyjson_read_err))
    );
    assert_eq!(
        ::std::mem::align_of::<yyjson_read_err>(),
        8usize,
        concat!("Alignment of ", stringify!(yyjson_read_err))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_read_err>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_read_err),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_read_err>())).msg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_read_err),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_read_err>())).pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_read_err),
            "::",
            stringify!(pos)
        )
    );
}
extern "C" {
    pub fn yyjson_read_opts(
        dat: *mut ::std::os::raw::c_char,
        len: size_t,
        flg: yyjson_read_flag,
        alc: *const yyjson_alc,
        err: *mut yyjson_read_err,
    ) -> *mut yyjson_doc;
}
extern "C" {
    pub fn yyjson_doc_free(doc: *mut yyjson_doc);
}
extern "C" {
    pub fn yyjson_arr_iter_next(iter: *mut yyjson_arr_iter) -> *mut yyjson_val;
}
extern "C" {
    pub fn yyjson_obj_iter_next(iter: *mut yyjson_obj_iter) -> *mut yyjson_val;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union yyjson_val_uni {
    pub u64_: u64,
    pub i64_: i64,
    pub f64_: f64,
    pub str_: *const ::std::os::raw::c_char,
    pub ptr: *mut ::std::os::raw::c_void,
    pub ofs: size_t,
}
#[test]
fn bindgen_test_layout_yyjson_val_uni() {
    assert_eq!(
        ::std::mem::size_of::<yyjson_val_uni>(),
        8usize,
        concat!("Size of: ", stringify!(yyjson_val_uni))
    );
    assert_eq!(
        ::std::mem::align_of::<yyjson_val_uni>(),
        8usize,
        concat!("Alignment of ", stringify!(yyjson_val_uni))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_val_uni>())).u64_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_val_uni),
            "::",
            stringify!(u64_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_val_uni>())).i64_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_val_uni),
            "::",
            stringify!(i64_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_val_uni>())).f64_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_val_uni),
            "::",
            stringify!(f64_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_val_uni>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_val_uni),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_val_uni>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_val_uni),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_val_uni>())).ofs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_val_uni),
            "::",
            stringify!(ofs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct yyjson_val {
    pub tag: u64,
    pub uni: yyjson_val_uni,
}
#[test]
fn bindgen_test_layout_yyjson_val() {
    assert_eq!(
        ::std::mem::size_of::<yyjson_val>(),
        16usize,
        concat!("Size of: ", stringify!(yyjson_val))
    );
    assert_eq!(
        ::std::mem::align_of::<yyjson_val>(),
        8usize,
        concat!("Alignment of ", stringify!(yyjson_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_val>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_val),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_val>())).uni as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_val),
            "::",
            stringify!(uni)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yyjson_doc {
    pub root: *mut yyjson_val,
    pub alc: yyjson_alc,
    pub dat_read: size_t,
    pub val_read: size_t,
    pub str_pool: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_yyjson_doc() {
    assert_eq!(
        ::std::mem::size_of::<yyjson_doc>(),
        64usize,
        concat!("Size of: ", stringify!(yyjson_doc))
    );
    assert_eq!(
        ::std::mem::align_of::<yyjson_doc>(),
        8usize,
        concat!("Alignment of ", stringify!(yyjson_doc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_doc>())).root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_doc),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_doc>())).alc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_doc),
            "::",
            stringify!(alc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_doc>())).dat_read as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_doc),
            "::",
            stringify!(dat_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_doc>())).val_read as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_doc),
            "::",
            stringify!(val_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_doc>())).str_pool as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_doc),
            "::",
            stringify!(str_pool)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yyjson_arr_iter {
    pub idx: size_t,
    pub max: size_t,
    pub cur: *mut yyjson_val,
}
#[test]
fn bindgen_test_layout_yyjson_arr_iter() {
    assert_eq!(
        ::std::mem::size_of::<yyjson_arr_iter>(),
        24usize,
        concat!("Size of: ", stringify!(yyjson_arr_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<yyjson_arr_iter>(),
        8usize,
        concat!("Alignment of ", stringify!(yyjson_arr_iter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_arr_iter>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_arr_iter),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_arr_iter>())).max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_arr_iter),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_arr_iter>())).cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_arr_iter),
            "::",
            stringify!(cur)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yyjson_obj_iter {
    pub idx: size_t,
    pub max: size_t,
    pub cur: *mut yyjson_val,
    pub obj: *mut yyjson_val,
}
#[test]
fn bindgen_test_layout_yyjson_obj_iter() {
    assert_eq!(
        ::std::mem::size_of::<yyjson_obj_iter>(),
        32usize,
        concat!("Size of: ", stringify!(yyjson_obj_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<yyjson_obj_iter>(),
        8usize,
        concat!("Alignment of ", stringify!(yyjson_obj_iter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_obj_iter>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_obj_iter),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_obj_iter>())).max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_obj_iter),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_obj_iter>())).cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_obj_iter),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yyjson_obj_iter>())).obj as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yyjson_obj_iter),
            "::",
            stringify!(obj)
        )
    );
}
